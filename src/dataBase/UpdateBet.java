/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dataBase;

import java.sql.SQLException;
import javax.swing.JList;
import javax.swing.JTextArea;

/**
 *
 * @author Marcin
 */
public class UpdateBet extends javax.swing.JFrame {

    /**
     * Creates new form UpdateBet
     */
    private int status = 1;     //jeszcze nierozstrzygniÄ™ty
    
    private JList jListEndedBetsToUpdate = new JList();
    private JList jListEndedBetsInProgToUpdate = new JList();
    private JList jListTodayBets = new JList();
    
    public UpdateBet() {
        initComponents();
        setFields();
    }
    
    private void setFields()
    {
        jRadioButtonWon.setText("Won");
        jRadioButtonLost.setText("Lost");
        jRadioButtonUnresolved.setText("Unresolved");
        jButtonUpdateResult.setText("Confirm");
    }
    
    public void getLists(JList jListEndedBetsToUpdate, JList jListEndedBetsInProgToUpdate,
            JList jListTodayBets)
    {
        this.jListEndedBetsInProgToUpdate = jListEndedBetsInProgToUpdate;
        this.jListEndedBetsToUpdate = jListEndedBetsToUpdate;
        this.jListTodayBets = jListTodayBets;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupResult = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();
        jRadioButtonWon = new javax.swing.JRadioButton();
        jRadioButtonLost = new javax.swing.JRadioButton();
        jButtonUpdateResult = new javax.swing.JButton();
        jRadioButtonUnresolved = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setRows(5);
        jScrollPane1.setViewportView(jTextAreaInfo);

        buttonGroupResult.add(jRadioButtonWon);
        jRadioButtonWon.setText("jRadioButton1");
        jRadioButtonWon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonWonActionPerformed(evt);
            }
        });

        buttonGroupResult.add(jRadioButtonLost);
        jRadioButtonLost.setText("jRadioButton2");
        jRadioButtonLost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLostActionPerformed(evt);
            }
        });

        jButtonUpdateResult.setText("jButton1");
        jButtonUpdateResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateResultActionPerformed(evt);
            }
        });

        buttonGroupResult.add(jRadioButtonUnresolved);
        jRadioButtonUnresolved.setSelected(true);
        jRadioButtonUnresolved.setText("jRadioButton1");
        jRadioButtonUnresolved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonUnresolvedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonWon)
                            .addComponent(jRadioButtonLost)
                            .addComponent(jRadioButtonUnresolved))
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addComponent(jButtonUpdateResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButtonWon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonLost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonUnresolved)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpdateResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonWonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonWonActionPerformed
       
        status = 2;
        System.out.println(status);
    }//GEN-LAST:event_jRadioButtonWonActionPerformed

    private void jButtonUpdateResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateResultActionPerformed
             
        int index = 0;
        
        if(jListEndedBetsToUpdate.getSelectedValue() != null)
        {              
                
            if(status != 1) //status inni niz zaklad nierostrzygniety
            {
                //aktualizacja list
                //lista zakladow do uaktualnienia  - usuniecie (1 z 5)
                DataContainer.listModelEndedBetsToUpdate.remove     
                        (jListEndedBetsToUpdate.getSelectedIndex());
               
                //wyczyszczenie modelu, odjecie z listy, wczytanie nowego modelu               
                //lista aktywnych zakladow (2 z 5) - usuniecie
                DataContainer.listModelAllActive.clear();
                index = DataContainer.dataFromDB.getActiveBetIndexById(DataContainer.id);
                DataContainer.dataFromDB.getBets().remove(index);
                DataContainer.fillAllActiveBetsList();

                //lista aktywnych zakladow nie w progresji (3 z 5) - usuniecie
                DataContainer.listModelActiveNotInProg.clear();
                index = DataContainer.dataFromDB.getActiveBetNotInProgIndexById(DataContainer.id);
                DataContainer.dataFromDB.getBetsNotInProg().remove(index);
                DataContainer.fillActiveBetsNotInProgression();
                
                //lista zakladow zakonczonych (4 z 5) - dodanie
                Bet bet = (Bet) DataContainer.object;
                DataContainer.listModelResolvedBetsNotInProg.addElement(bet);
                       
                //dodanie do 1 z 3 list (wygrany, przegrane, anulowane) (5 z 5)
                if(status == 2)
                    DataContainer.listModelWonBetsNotInProg.addElement(bet);
                
                if(status == 3)
                    DataContainer.listModelLostBetsNotInProg.addElement(bet);
                                            
                //aktualizacja bazy danych
                DataContainer.dataFromDB.getQueryManager().changeBetStatus(status, DataContainer.id);
                DataContainer.dataFromDB.getQueryManager().commitChanges();
                
                System.out.println(status);
            }
        }
            
            if(jListEndedBetsInProgToUpdate.getSelectedValue() != null)
            {
                if(status != 1) //status inni niz zaklad nierostrzygniety
                {
                //aktualizacja list
                //lista zakladow w progresji do uaktualnienia  - usuniecie (1 z 4)
                DataContainer.listModelEndedBetsInProgToUpdate.remove(
                        jListEndedBetsInProgToUpdate.getSelectedIndex());
               
                //wyczyszczenie modelu, odjecie z listy, wczytanie nowego modelu               
                //lista aktywnych zakladow (2 z 4) - usuniecie
                DataContainer.listModelAllActive.clear();
                index = DataContainer.dataFromDB.getActiveBetIndexById(DataContainer.id);
                DataContainer.dataFromDB.getBets().remove(index);
                DataContainer.fillAllActiveBetsList(); 
                
                //lista aktywnych zakladow w progresji (3 z 4) - usuniecie
                DataContainer.listModelActiveInProg.clear();
                index = DataContainer.dataFromDB.getActiveBetInProgIndexById(DataContainer.id);
                DataContainer.dataFromDB.getBetsInProg().remove(index);
                DataContainer.fillActiveBetsInProgression();
                
                //lista zakladow zakonczonych (4 z 4) - dodanie
                BetInProgression betInProg = (BetInProgression) DataContainer.object;
                DataContainer.listModelResolvedBetsInProg.addElement(betInProg);
                               
                //dodanie do 1 z 3 list (wygrany, przegrane, anulowane) (5 z 5)
                //aktualizacja bazy danych                    
                DataContainer.dataFromDB.getQueryManager().changeBetStatus(status, DataContainer.id);
                if(status == 2)
                {
                    DataContainer.listModelWonBetsInProg.addElement(betInProg);
                    //baza danych
                    int progressionId = betInProg.getProgression().getProgressionId();
                    DataContainer.dataFromDB.getQueryManager().endProgression(progressionId);
                    
                    //lista progresji zakonczonych - dodanie
                    DataContainer.listModelResolvedProgressions.addElement(betInProg.getProgression());
                    //lista progresji aktywnych - usuniecie
                    DataContainer.listModelProgressions.clear();
                    int progId = DataContainer.dataFromDB.getQueryManager().getProgressionIdByBetId(DataContainer.id);
                    int progIndex = DataContainer.dataFromDB.getProgressionsIndexById(progId);
                    DataContainer.dataFromDB.getProgressions().remove(progIndex);
                    DataContainer.fillActiveProgressions();
                }
                
                //aktualizacja list zwiazanych z progresja    !!!!  
                
                if(status == 3)
                    DataContainer.listModelLostBetsInProg.addElement(betInProg);
                //dialog z zapytaniem czy zakonczyc progresje
                                  
                }
            }           
    }//GEN-LAST:event_jButtonUpdateResultActionPerformed

    private void jRadioButtonLostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLostActionPerformed
        
        status = 3;
        System.out.println(status);
    }//GEN-LAST:event_jRadioButtonLostActionPerformed

    private void jRadioButtonUnresolvedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonUnresolvedActionPerformed
        
        status = 1;
        System.out.println(status);
    }//GEN-LAST:event_jRadioButtonUnresolvedActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateBet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateBet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateBet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateBet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateBet().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupResult;
    private javax.swing.JButton jButtonUpdateResult;
    private javax.swing.JRadioButton jRadioButtonLost;
    private javax.swing.JRadioButton jRadioButtonUnresolved;
    private javax.swing.JRadioButton jRadioButtonWon;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaInfo;
    // End of variables declaration//GEN-END:variables

    public JTextArea getjTextAreaInfo() 
    {
        return jTextAreaInfo;
    }
}
